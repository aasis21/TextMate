---
description: UI Rules
globs: 
alwaysApply: false
---
// TextMate AI Assistant - UI Components Rules
// This file provides specific instructions for Cursor AI when working with UI components

// UI COMPONENTS OVERVIEW
/*
The TextMate extension has two main UI components:
- Popup UI: The main interface accessed by clicking the extension icon
- Options Page: The settings page for configuring the extension
*/

// POPUP UI
/*
The popup UI (popup.js, popup.html, popup.css) provides the main user interface:
- Text input area for entering prompts
- Generate button for creating AI text
- Copy button for copying generated text to clipboard
- Settings button for accessing the options page
- Loading indicator for API calls in progress
- Error display for API or other errors

Key functionality:
- Text generation via OpenAI API
- Clipboard operations
- Settings access
- Error handling and display
*/

// OPTIONS PAGE
/*
The options page (options.js, options.html, options.css) allows users to configure settings:
- API key input and storage
- Model selection (dropdown)
- Temperature slider (0.0 - 1.0)
- Max tokens input
- Save button for storing settings
- Reset button for restoring defaults

Key functionality:
- Settings management via Config utility
- Form validation
- Settings persistence
- UI feedback on save/reset
*/

// UI DESIGN PRINCIPLES
/*
All UI components should follow these design principles:
- Clean, minimalist design with ample whitespace
- Responsive layout that works at different sizes
- Support for both light and dark modes via CSS variables
- Accessible UI with proper ARIA attributes and keyboard navigation
- Clear visual feedback for user actions
- Consistent visual language across all extension pages
*/

// CSS ORGANIZATION
/*
CSS follows these organization principles:
- CSS variables for colors, spacing, and typography
- Mobile-first responsive design
- BEM naming convention for classes
- Separate sections for layout, components, and utilities
- Media queries for responsive adjustments
*/

// EVENT HANDLING
/*
UI event handling follows these patterns:
- Event delegation for multiple similar elements
- Debounced handlers for input events
- Clear separation of UI logic and business logic
- Proper cleanup of event listeners to prevent memory leaks
*/

// ACCESSIBILITY REQUIREMENTS
/*
All UI components must meet these accessibility requirements:
- Semantic HTML elements (buttons, inputs, etc.)
- Proper focus management and keyboard navigation
- ARIA attributes for non-standard controls
- Sufficient color contrast (WCAG AA compliance)
- Screen reader compatibility
*/

// WHEN MODIFYING UI COMPONENTS
/*
- Test changes in both light and dark modes
- Ensure responsive behavior at different sizes
- Verify accessibility compliance
- Maintain consistent visual language
- Consider the impact on user experience
*/ 