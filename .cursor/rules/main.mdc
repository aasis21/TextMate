---
description: main rules
globs: 
alwaysApply: false
---
// TextMate AI Assistant - Cursor Rules
// This file provides project-specific instructions for Cursor AI

// PROJECT OVERVIEW
/*
TextMate is a browser extension that provides AI-powered text generation and rewriting capabilities.
It integrates with OpenAI's API to enhance text input fields on any webpage.
The extension follows a modular architecture with utility modules for configuration, logging, and notifications.
*/

// ARCHITECTURE
/*
The project follows a modular architecture:
- Utility modules (config.js, logger.js, notification.js) provide core functionality
- Background script (background.js) handles extension lifecycle and messaging
- Popup UI (popup.js, popup.html) provides the main user interface
- Options page (options.js, options.html) allows users to configure settings
*/

// CODING STANDARDS
/*
- Use ES6+ syntax (arrow functions, template literals, destructuring, etc.)
- Follow a consistent naming convention (camelCase for variables and functions, PascalCase for classes)
- Use async/await for asynchronous operations instead of callbacks or raw promises
- Add JSDoc comments for all public functions and classes
- Implement proper error handling with try/catch blocks
- Use module pattern or ES6 modules for code organization
- Prefer const over let, and avoid var
- Keep functions small and focused on a single responsibility
*/

// ERROR HANDLING
/*
All API calls and operations that might fail should be wrapped in try/catch blocks.
Use the Logger utility for logging errors and the Notification utility for user-facing error messages.
Example:
try {
  // Operation that might fail
} catch (error) {
  logger.error('Operation failed', error);
  notification.error('An error occurred: ' + error.message);
}
*/

// API INTEGRATION
/*
The extension uses OpenAI's API for text generation.
API calls should:
- Include proper error handling
- Implement retry logic for transient failures
- Respect rate limits
- Provide user feedback during API calls (loading indicators, etc.)
- Securely handle API keys (stored in chrome.storage.sync)
*/

// BROWSER COMPATIBILITY
/*
The extension targets both Chrome and Edge browsers.
Use standard Web Extensions API (chrome.*) which is compatible with both browsers.
Avoid browser-specific APIs unless absolutely necessary.
Test features in both browsers when possible.
*/

// PERFORMANCE CONSIDERATIONS
/*
- Minimize DOM operations, especially in content scripts
- Use event delegation for handling multiple similar elements
- Debounce event handlers for frequently triggered events
- Avoid memory leaks by properly cleaning up event listeners
- Keep the extension's footprint small to minimize impact on browser performance
*/

// SECURITY BEST PRACTICES
/*
- Never expose API keys in client-side code
- Validate all user inputs
- Use Content Security Policy to prevent XSS attacks
- Implement proper permission handling
- Follow the principle of least privilege for requested permissions
*/

// TESTING APPROACH
/*
The project uses Jest for testing.
Each module should have corresponding test files in the tests directory.
Tests should cover:
- Normal operation
- Edge cases
- Error conditions
- Mock external dependencies (chrome.* APIs, fetch, etc.)
*/

// COMMON UTILITIES
/*
Config: Handles extension settings
- Methods: init(), getApiKey(), setApiKey(), getModel(), setModel(), etc.
- Usage: const config = new Config(); await config.init(); const apiKey = config.getApiKey();

Logger: Provides logging functionality
- Methods: log(), info(), warn(), error()
- Usage: const logger = new Logger(); logger.init(); logger.info('Operation completed');

Notification: Displays user notifications
- Methods: success(), error(), info(), warning()
- Usage: const notification = new Notification(); notification.init(); notification.success('Text copied to clipboard');
*/

// EXTENSION LIFECYCLE
/*
The extension follows the standard browser extension lifecycle:
- Installation/update handling in background.js
- Message passing between different contexts (background, popup, options)
- Event-driven architecture for user interactions
*/

// UI DESIGN PRINCIPLES
/*
- Clean, minimalist design
- Responsive layout that works well at different sizes
- Support for both light and dark modes
- Accessible UI elements (proper contrast, keyboard navigation, etc.)
- Consistent visual language across all extension pages
*/

// DEPENDENCIES
/*
The project uses:
- Webpack for bundling
- Babel for transpilation
- ESLint for code quality
- Jest for testing
- No external UI frameworks (vanilla JS/CSS)
*/

// DIRECTORY STRUCTURE
/*
src/
├── js/
│   ├── utils/
│   │   ├── config.js
│   │   ├── logger.js
│   │   └── notification.js
│   ├── background.js
│   ├── popup.js
│   └── options.js
├── html/
│   ├── popup.html
│   └── options.html
├── css/
│   ├── popup.css
│   └── options.css
└── images/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
*/

// WHEN GENERATING CODE
/*
- Follow the existing patterns and architecture
- Include proper error handling
- Add JSDoc comments for public functions
- Consider browser compatibility
- Implement proper logging
- Consider performance implications
- Update documenation and comments as needed
*/ 